
   
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;

public class Student {
    Scanner scan = new Scanner(System.in);
    private String userName; //STORES THE STUDENTS USERNAME

    //CONSTRUCTS A NEW STUDENT OBJ FROM USERNAME STORED FROM LOGIN
    public Student(String userName) {
        this.userName = userName;
    }

    /*
    this method runs the quiz on the terminal, displaying the questions numbered as well as giving them
    the option to attach a file or submit answers on the terminal. There is input validation incase they enter
    something they are not prompted to.
     */
    public void runQuiz(String quizName, String userName, String teacherName, String courseName, String plainQuizName) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(quizName));
        File f = new File(userName + "_" + teacherName + "_" + courseName + "_" + plainQuizName + ".txt");
        BufferedWriter bw = new BufferedWriter(new FileWriter(f));
        String nextLine = "";
        String shuffleStatus = br.readLine(); //reads the first line of whether or not it will shuffle
        String copy = "";
        String totalCopy = "";
        String importedFile = "";
        String copyQuiz = "";
        int counter = 0; //counts number of lines
        int loop = 0; //used for input validation
        int number = 1;
        String firstLine;
        String secondLine;
        String thirdLine;
        String fourthLine;
        while ((nextLine = br.readLine()) != null) {
            firstLine = br.readLine();
            secondLine = br.readLine();
            thirdLine = br.readLine();
            fourthLine = br.readLine();
            System.out.println(number + ". " + nextLine + "\n" + firstLine + "\n" + secondLine +
                    "\n" + thirdLine + "\n" + fourthLine);
            copyQuiz = copyQuiz + nextLine + "\n" + firstLine + "\n" + secondLine +
                    "\n" + thirdLine + "\n" + fourthLine + "\n";
            counter++;
            number++;
        }
        br.close();
        System.out.println("Would you like to attach a file with answers or answer in the quiz?");
        System.out.println("1. attach a file\n2. answer in the quiz");
        while (loop == 0) {
            String option = scan.nextLine();
            if (option.equals("1")) {
                System.out.println("Enter the name of the file you would like to import:");
                importedFile = scan.nextLine();
                BufferedReader bufferedReader3 = new BufferedReader(new FileReader(importedFile));
                while ((copy = bufferedReader3.readLine()) != null) {
                    totalCopy = totalCopy + copy + "\n";
                }
                loop++;
            } else if (option.equals("2")) {
                for (int i = 1; i <= counter; i++) {
                    System.out.println("What is the answer to question " + i + ":");
                    totalCopy = totalCopy + scan.nextLine().toUpperCase() + "\n";
                }
                loop++;
            } else {
                System.out.println("Invalid Input: Try Again");
            }
        }
        System.out.println("Thanks for taking the quiz!");
        String timeStamp = new SimpleDateFormat("MM/dd/yyyy_HH:mm:ss").format(Calendar.getInstance().getTime()); //creates a timestamp when they submit for teacher to see
        totalCopy = shuffleStatus + "\n" + copyQuiz + userName + "\n" + totalCopy + timeStamp;
        bw.write(totalCopy); //writes the whole quiz to a file so the teacher can see
        bw.close();

    }

    /*
    Where the student will pick courses from their corresponding teacher. Reads from a file that has all of the teachers
    courses in it. Students are given the exit option as well. Once they select an available course from a teacher, it will
    show all the quizzes in that course.
     */
    public String pickCourse(String filename) {
        String courseName = null;
        try {
            File course = new File(filename);
            FileReader frcourse = new FileReader(course);
            BufferedReader bfrCourse = new BufferedReader(frcourse);
            BufferedReader br = new BufferedReader(new FileReader(filename));
            courseName = "";
            if (br.readLine() == null) {
                System.out.println("Your teacher has not created any courses");
                courseName = "end";
                br.close();
            } else {
                br.close();
                String line = bfrCourse.readLine();
                int counter = 0;
                System.out.println("Course Options:");
                while (line != null) { //where courses are listed on terminal
                    counter++;
                    System.out.println(counter + ". " + line);
                    line = bfrCourse.readLine();
                }
                System.out.println((counter + 1) + ". Exit"); //final option, which is to exit
                int courseSelector = 0;
                do { //input validation, if they enter an invalid option
                    System.out.println("Please select which course you would like to take?");
                    courseSelector = scan.nextInt(); //stores which option they pick
                    scan.nextLine(); //clears next line for scanner
                    if (courseSelector <= 0 || courseSelector > counter + 1) {
                        System.out.println("Please enter a valid course id!");
                    }
                } while (courseSelector <= 0 || courseSelector > counter + 1);

                if (courseSelector == counter + 1) {
                    courseName = "end";
                } else {
                    BufferedReader bfr = new BufferedReader(new FileReader(filename));
                    for (int i = 0; i < courseSelector; i++) {
                        courseName = bfr.readLine();
                    }
                    //close all streams
                    bfr.close();
                    bfrCourse.close();
                }
            }
        } catch (IOException io) {
            io.printStackTrace();
        }
        return courseName; //returns the name of course the user selected
    }
    /*
    shows the student all the quizzes that have been written for a teacher in that course. Students only
    get one attempt. If they click on a quiz that they already took, they can either check their grade or go back
    to see a different quiz.
     */

    public String pickQuiz(String filename) {
        String courseName = null;
        try {
            File course = new File(filename);
            FileReader frcourse = new FileReader(course);
            BufferedReader bfrCourse = new BufferedReader(frcourse);
            BufferedReader br = new BufferedReader(new FileReader(filename));
            courseName = "";
            if (br.readLine() == null) {
                courseName = "empty";
                br.close();
            } else {
                br.close();
                String line = bfrCourse.readLine();
                int counter = 0; //used to print the number in front of each quiz
                System.out.println("Quiz Options:");
                while (line != null) { //shows all available quiz options
                    counter++;
                    System.out.println(counter + ". " + line);
                    line = bfrCourse.readLine();
                }
                System.out.println((counter + 1) + ". Exit");
                int courseSelector = 0;
                do { //input validation
                    System.out.println("Please select which quiz you would like to take?");
                    courseSelector = scan.nextInt();
                    scan.nextLine();
                    if (courseSelector <= 0 || courseSelector > counter + 1) {
                        System.out.println("Please enter a valid quiz id!");
                    }
                } while (courseSelector <= 0 || courseSelector > counter + 1);


                if (courseSelector == counter + 1) {
                    courseName = "end";
                } else {
                    BufferedReader bfr = new BufferedReader(new FileReader(filename));
                    for (int i = 0; i < courseSelector; i++) {
                        courseName = bfr.readLine();
                    }
                    //close all streams
                    bfr.close();
                    bfrCourse.close();
                }
            }
        } catch (IOException io) {
            io.printStackTrace();
        }
        return courseName;
    }


    public void mainStudent() {
        //takes place after login
        Scanner scan = new Scanner(System.in);
        try {
            Student student = new Student(this.userName); //creates Student object
            int n = 0;
            String teacher = null; //initiates string to store teachers username
            while (n == 0) {
                BufferedReader br = new BufferedReader(new FileReader("TeacherAccount.txt"));
                System.out.println("What is the username of your teacher?");
                teacher = scan.nextLine(); //user input to teacher string
                String newLine = "";
                boolean validTeacher = false;  //boolean which states whether or not the teacher account exists
                while ((newLine = br.readLine()) != null) { //looks for inputted teacher username in accounts file
                    if (newLine.equals(teacher)) {
                        validTeacher = true;
                        break;
                    }
                }
                if (validTeacher == false) {
                    System.out.println("Teacher does not exist");
                } else {
                    n++;
                }
            }
            if (!new File(teacher + "_Courses.txt").exists()) { //prints error if the teacher has not created any courses
                System.out.println("Your teacher has not created any courses");
                return;
            }
            int loop = 0; //initiates looping variable

            do {
                String course = student.pickCourse(teacher + "_Courses.txt"); //runs method to have student pick a course
                if (course.equals("end")) {  //breaks out of loops is "end" is returned for pickCourse method
                    break;
                }
                int z = 0;
                if (!new File(teacher + "_" + course + ".txt").exists()) {
                    while (z == 0) {
                        System.out.println("There are no quizzes in this course");
                        System.out.println("1. Return to course selection\n2. Exit");
                        String pick = scan.nextLine();
                        if (pick.equals("1")) {
                            z++;
                        } else if (pick.equals("2")) {
                            return;
                        } else {
                            System.out.println("INVALID INPUT");
                        }
                    }
                } else {
                    String quiz = student.pickQuiz(teacher + "_" + course + ".txt"); //runs method to have student pick a quiz
                    System.out.println(quiz);
                    if (quiz.equals("end")) {
                        break;
                    } else if (quiz.equals("empty")) { //if there is a file created but is empty
                        int y = 0;
                        while (y == 0) {
                            System.out.println("There are no quizzes in this course");
                            System.out.println("1. Return to course selection\n2. Exit");
                            String pick = scan.nextLine();
                            if (pick.equals("1")) {
                                y++;
                            } else if (pick.equals("2")) {
                                return;
                            } else {
                                System.out.println("INVALID INPUT");
                            }
                        }
                    } else {
                        BufferedReader bufferedReader2 = new BufferedReader(new FileReader(teacher + "_" + course + "_" + quiz + ".txt"));
                        String shuffleStatus = bufferedReader2.readLine(); //whether or not to shuffle the quiz
                        if (shuffleStatus.equalsIgnoreCase("True")) {
                            student.shuffle(teacher + "_" + course + "_" + quiz + ".txt"); //shuffles quiz
                        }
                        if (!new File(student.userName + "_" + teacher + "_" + course + "_" + quiz + ".txt").exists()) { //checks if quiz has already been taken. if not then runs the quiz
                            student.runQuiz(teacher + "_" + course + "_" + quiz + ".txt", student.userName, teacher, course, quiz);
                        } else {
                            System.out.println("Quiz already taken");
                            int optionLoop = 0;
                            while (optionLoop == 0) {
                                System.out.println("1. View Quiz Grade\n2. Exit Back to Courses");
                                String viewGrade = scan.nextLine();
                                if (viewGrade.equals("1")) {
                                    File f = new File(student.userName + "_" + teacher + "_" + course + "_" + quiz + ".txt");
                                    BufferedReader brquiz = new BufferedReader(new FileReader(f));
                                    String quizLine = brquiz.readLine();
                                    int cline = 0;
                                    while (quizLine != null) {
                                        cline++;
                                        quizLine = brquiz.readLine(); //reads through all line
                                    }
                                    BufferedReader brquiz2 = new BufferedReader(new FileReader(f)); //reads the same quiz with new bfr
                                    String lastLine = "";
                                    String grade = "";
                                    for (int i = 0; i < cline; i++) {
                                        lastLine = brquiz2.readLine();
                                    }
                                    if (lastLine.substring(lastLine.length() - 1).equals("%")) {
                                        grade = lastLine;
                                    } else {
                                        grade = "Grade not yet entered";
                                    }
                                    System.out.println("Grade: " + grade);
                                    loop++;
                                    optionLoop++;
                                } else if (viewGrade.equals("2")) {
                                    optionLoop++;
                                } else {
                                    System.out.println("Invalid Input. Try again.");
                                }
                            }
                        }
                    }
                }
            } while (loop == 0);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public void shuffle(String filename) throws IOException {   //Shuffles the question order and the answer order of the quiz file
        ArrayList<String> questions = new ArrayList<>();   //array that stores full questions with answers attached
        File f = new File(filename);
        BufferedReader br = new BufferedReader(new FileReader(f));
        BufferedReader bfr = new BufferedReader(new FileReader(filename));
        String line = "";       //initiates a string
        int numq = 1;
        String shuffleStatus = bfr.readLine();
        while (bfr.readLine() != null) {
            numq++;           //counts the number of lines in file
        }
        bfr.close();
        numq = numq / 5;   //counts number of questions
        int lineNum = 1;
        int mult = 0;
        br.readLine();
        while(line != null){
            line = br.readLine();
            ++lineNum;
            if(lineNum == ( 2 + 5 * mult) && mult <= numq && line != null){
                mult++;
                String q = "";
                String ans = "";
                q = line + "\n";
                lineNum++;
                q += br.readLine() + "\n";
                lineNum++;
                q += br.readLine() + "\n";
                lineNum++;
                q += br.readLine() + "\n";
                lineNum++;
                q += br.readLine() + "\n";
                questions.add(q);
            }
        }
        br.close();
        Collections.shuffle(questions);  //shuffles question order

        ArrayList<String> newQuestions = new ArrayList<>(); //list that new shuffled answers will be stored in
        for (int i = 0; i < questions.size(); i++) {
            String wholeQuestion = questions.get(i); //stores one question
            String q = wholeQuestion.substring(0, wholeQuestion.indexOf("\n")); //question line
            String answerOptions = wholeQuestion.substring(wholeQuestion.indexOf("\n"));
            answerOptions = answerOptions.substring(1);
            String a = answerOptions.substring(0, answerOptions.indexOf("\n"));
            String a1 = a.substring(3);   //answer option A without "A. "
            answerOptions = answerOptions.substring(answerOptions.indexOf("\n"));
            answerOptions = answerOptions.substring(1);
            String b = answerOptions.substring(0, answerOptions.indexOf("\n"));
            String b1 = b.substring(3); //answer option B without "B. "
            answerOptions = answerOptions.substring(answerOptions.indexOf("\n"));
            answerOptions = answerOptions.substring(1);
            String c = answerOptions.substring(0, answerOptions.indexOf("\n"));
            String c1 = c.substring(3);  //answer option C without "C. "
            answerOptions = answerOptions.substring(answerOptions.indexOf("\n"));
            answerOptions = answerOptions.substring(1);
            String d = answerOptions.substring(0, answerOptions.indexOf("\n"));
            String d1 = d.substring(3);  //answer option D without "D. "
            ArrayList<String> answerHolder = new ArrayList<>(); //holds answer options
            answerHolder.add(a1);
            answerHolder.add(b1);
            answerHolder.add(c1);
            answerHolder.add(d1);
            Collections.shuffle(answerHolder); //shuffles answer options
            String answerI = "";
            for (int j = 0; j < 4; j++) { //attaches an "A. ", "B. ", "C. ", or "D. " in front of answer option
                if (j == 0) {
                    answerI += ("\n" + "A. " + answerHolder.get(j));
                } else if (j == 1) {
                    answerI += ("\nB. " + answerHolder.get(j));
                } else if (j == 2) {
                    answerI += ("\nC. " + answerHolder.get(j));
                } else if (j == 3) {
                    answerI += ("\nD. " + answerHolder.get(j));
                }
            }

            String total = q + answerI;
            newQuestions.add(total);  //string of answer options
        }
        BufferedWriter bw = new BufferedWriter(new FileWriter(filename)); //new buffered writer to write back to quiz file
        bw.write(shuffleStatus); //writes "True" at top of file
        bw.write("\n");
        for (int k = 0; k < newQuestions.size(); k++) { //writes full shuffled quiz back to file
             if (k < newQuestions.size() - 1) {
                 bw.write(newQuestions.get(k));
                 bw.write("\n");
             } else {
                 bw.write(newQuestions.get(k));
             }
        }
        bw.close();
    }
}
