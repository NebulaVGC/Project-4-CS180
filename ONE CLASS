import java.io.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Scanner;

public class MainMethod {
    Scanner scan = new Scanner(System.in);
    private String userName;
    final static String welcomePrompt = "Please choose a login type\n1. Teacher\n2. Student";
    final static String Error = "There was an error!";
    final static String accountPrompt = "How would you like to proceed?\n1. Make a new account\n2. Login with existing account\n3. Edit existing account";
    final static String MakeUsername = "Please enter your desired username";
    final static String MakePassword = "Please enter your desired password";
    final static String LoginUsername = "Please enter your username";
    final static String LoginPassword = "Please enter your password";
    final static String editAccount = "What would you like to edit?\n1. Account name\n2. Password";

    final static String WrongPassword = "That's the wrong password!";
    final static String UsernameExist = "This username already existed!";
    final static String UsernameDoesNotExist = "This username does not exist!";

    public static void main(String[] args) {
        MainMethod mainMethod = new MainMethod();
        String Username = mainMethod.runQuiz();
        String[] splited = Username.split(" ");
        if (Username.equals("")) {
            return;
        } else if (splited[0].equals("Student")) {
            Username = Username.substring(8);
            mainMethod.userName = Username;
            mainMethod.mainStudent();
        } else if (splited[0].equals("Teacher")) {
            Username = Username.substring(8);
            mainMethod.userName = Username;
            mainMethod.teacherInterface();
        }
    }
    public String runQuiz() {
        int usernameStatus;
        int welcome = 0;
        int account;
        int[] LoginType = new int[1];
        int[] accountChoice = new int[1];
        int[] login = new int[1];

        checkFile();
        String Username;
        while (welcome == 0) {
            System.out.println(welcomePrompt);
            LoginType[0] = Integer.parseInt(scan.nextLine());
            if (LoginType[0] != 1 && LoginType[0] != 2) {
                System.out.println(Error);
            } else {
                welcome++;
            }
        }
        if (LoginType[0] == 1) {
            while (login[0] == 0) {
                account = 0;
                usernameStatus = 0;
                while (account == 0) {
                    System.out.println(accountPrompt);
                    accountChoice[0] = Integer.parseInt(scan.nextLine());
                    if (accountChoice[0] != 1 && accountChoice[0] != 2 && accountChoice[0] != 3) {
                        System.out.println(Error);
                    } else {
                        account++;
                    }
                }
                if (accountChoice[0] == 1) {
                    System.out.println(MakeUsername);
                    while (usernameStatus == 0) {
                        Username = scan.nextLine();
                        try {
                            File f = new File("TeacherAccount.txt");
                            FileReader fr = new FileReader(f);
                            BufferedReader bfr = new BufferedReader(fr);
                            String line = bfr.readLine();
                            usernameStatus = 1;

                            while (line != null) {
                                if (Username.equals(line)) {
                                    System.out.println(UsernameExist);
                                    usernameStatus = 2;
                                    break;
                                }
                                line = bfr.readLine();
                            }
                            bfr.close();
                            if (usernameStatus == 1) {
                                File teacherAccount = new File("TeacherAccount.txt");
                                FileOutputStream fos = new FileOutputStream(teacherAccount, true);
                                PrintWriter pw = new PrintWriter(fos);
                                pw.println(Username);
                                System.out.println(MakePassword);
                                String password = scan.nextLine();
                                File teacherPassword = new File("TeacherPassword.txt");
                                FileOutputStream fos2 = new FileOutputStream(teacherPassword, true);
                                PrintWriter pw2 = new PrintWriter(fos2);
                                pw2.println(password);
                                pw2.close();
                                pw.close();
                                login[0] = 1;
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                } else if (accountChoice[0] == 2) {
                    System.out.println(LoginUsername);
                    while (usernameStatus == 0) {
                        try {
                            Username = scan.nextLine();
                            File f = new File("TeacherAccount.txt");
                            FileReader fr = new FileReader(f);
                            BufferedReader bfr = new BufferedReader(fr);
                            String line = bfr.readLine();
                            usernameStatus = 1;
                            int[] counter = new int[1];
                            ArrayList<String> accountList = new ArrayList<>();
                            ArrayList<String> passwordList = new ArrayList<>();

                            while (line != null) {
                                accountList.add(line);
                                if (Username.equals(line)) {
                                    counter[0]++;
                                }
                                line = bfr.readLine();
                            }
                            bfr.close();
                            if (counter[0] == 0) {
                                System.out.println(UsernameDoesNotExist);
                                break;
                            } else {
                                System.out.println(LoginPassword);
                                String password = scan.nextLine();
                                File f2 = new File("TeacherPassword.txt");
                                FileReader fr2 = new FileReader(f2);
                                BufferedReader bfr2 = new BufferedReader(fr2);
                                String line2 = bfr2.readLine();

                                while (line2 != null) {
                                    passwordList.add(line2);
                                    line2 = bfr2.readLine();
                                }
                                bfr2.close();
                                if (accountList.indexOf(Username) == passwordList.indexOf(password)) {
                                    return "Teacher " + Username;
                                } else {
                                    System.out.println(WrongPassword);
                                    break;
                                }
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                } else if (accountChoice[0] == 3) {
                    System.out.println(LoginUsername);
                    while (usernameStatus == 0) {
                        try {
                            Username = scan.nextLine();
                            File f = new File("TeacherAccount.txt");
                            FileReader fr = new FileReader(f);
                            BufferedReader bfr = new BufferedReader(fr);
                            String line = bfr.readLine();
                            usernameStatus = 1;
                            int[] counter = new int[1];
                            ArrayList<String> accountList = new ArrayList<>();
                            ArrayList<String> passwordList = new ArrayList<>();

                            while (line != null) {
                                accountList.add(line);
                                if (Username.equals(line)) {
                                    counter[0]++;
                                }
                                line = bfr.readLine();
                            }
                            bfr.close();
                            if (counter[0] == 0) {
                                System.out.println(UsernameDoesNotExist);
                                break;
                            } else {
                                System.out.println(LoginPassword);
                                String Password = scan.nextLine();
                                File f2 = new File("TeacherPassword.txt");
                                FileReader fr2 = new FileReader(f2);
                                BufferedReader bfr2 = new BufferedReader(fr2);
                                String line2 = bfr2.readLine();

                                while (line2 != null) {
                                    passwordList.add(line2);
                                    line2 = bfr2.readLine();
                                }
                                bfr2.close();
                                if (accountList.indexOf(Username) == passwordList.indexOf(Password)) {
                                    //run teacher
                                    try {
                                        System.out.println(editAccount);
                                        int edit = Integer.parseInt(scan.nextLine());
                                        if (edit == 1) {
                                            System.out.println(MakeUsername);
                                            String username = scan.nextLine();
                                            accountList.set(accountList.indexOf(Username), username);
                                            File teacherAccount = new File("TeacherAccount.txt");
                                            FileOutputStream fos2 = new FileOutputStream(teacherAccount, false);
                                            PrintWriter pw2 = new PrintWriter(fos2);

                                            for (int i = 0; i < accountList.size(); i++) {
                                                pw2.println(accountList.get(i));
                                            }
                                            pw2.close();
                                        } else if (edit == 2) {
                                            System.out.println(MakePassword);
                                            String password = scan.nextLine();
                                            passwordList.set(passwordList.indexOf(Password), password);
                                            File teacherPassword = new File("TeacherPassword.txt");
                                            FileOutputStream fos2 = new FileOutputStream(teacherPassword, false);
                                            PrintWriter pw2 = new PrintWriter(fos2);

                                            for (int i = 0; i < accountList.size(); i++) {
                                                pw2.println(passwordList.get(i));
                                            }
                                            pw2.close();
                                        }
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                    return "";
                                } else {
                                    System.out.println(WrongPassword);
                                    break;
                                }
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        } else if (LoginType[0] == 2) {
            while (login[0] == 0) {
                account = 0;
                usernameStatus = 0;
                while (account == 0) {
                    System.out.println(accountPrompt);
                    accountChoice[0] = Integer.parseInt(scan.nextLine());
                    if (accountChoice[0] != 1 && accountChoice[0] != 2 && accountChoice[0] != 3) {
                        System.out.println(Error);
                    } else {
                        account++;
                    }
                }
                if (accountChoice[0] == 1) {
                    System.out.println(MakeUsername);
                    while (usernameStatus == 0) {

                        Username = scan.nextLine();
                        try {
                            File f = new File("StudentAccount.txt");
                            FileReader fr = new FileReader(f);
                            BufferedReader bfr = new BufferedReader(fr);
                            String line = bfr.readLine();
                            usernameStatus = 1;

                            while (line != null) {
                                if (Username.equals(line)) {
                                    System.out.println(UsernameExist);
                                    usernameStatus = 2;
                                    break;
                                }
                                line = bfr.readLine();
                            }
                            bfr.close();
                            if (usernameStatus == 1) {
                                File studentAccount = new File("StudentAccount.txt");
                                FileOutputStream fos = new FileOutputStream(studentAccount, true);
                                PrintWriter pw = new PrintWriter(fos);
                                pw.println(Username);
                                System.out.println(MakePassword);
                                String password = scan.nextLine();
                                File studentPassword = new File("StudentPassword.txt");
                                FileOutputStream fos2 = new FileOutputStream(studentPassword, true);
                                PrintWriter pw2 = new PrintWriter(fos2);
                                pw2.println(password);
                                pw2.close();
                                pw.close();
                                login[0] = 1;
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                } else if (accountChoice[0] == 2) {
                    System.out.println(LoginUsername);
                    while (usernameStatus == 0) {

                        try {
                            Username = scan.nextLine();
                            File f = new File("StudentAccount.txt");
                            FileReader fr = new FileReader(f);
                            BufferedReader bfr = new BufferedReader(fr);
                            String line = bfr.readLine();
                            usernameStatus = 1;
                            int[] counter = new int[1];
                            ArrayList<String> accountList = new ArrayList<>();
                            ArrayList<String> passwordList = new ArrayList<>();

                            while (line != null) {
                                accountList.add(line);
                                if (Username.equals(line)) {
                                    counter[0]++;
                                }
                                line = bfr.readLine();
                            }
                            bfr.close();
                            if (counter[0] == 0) {
                                System.out.println(UsernameDoesNotExist);
                                break;
                            } else {
                                System.out.println(LoginPassword);
                                String password = scan.nextLine();
                                File f2 = new File("StudentPassword.txt");
                                FileReader fr2 = new FileReader(f2);
                                BufferedReader bfr2 = new BufferedReader(fr2);
                                String line2 = bfr2.readLine();

                                while (line2 != null) {
                                    passwordList.add(line2);
                                    line2 = bfr2.readLine();
                                }
                                bfr2.close();
                                if (accountList.indexOf(Username) == passwordList.indexOf(password)) {
                                    return "Student " + Username;
                                } else {
                                    System.out.println(WrongPassword);
                                    break;
                                }
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                } else if (accountChoice[0] == 3) {
                    System.out.println(LoginUsername);
                    while (usernameStatus == 0) {
                        try {
                            Username = scan.nextLine();
                            File f = new File("StudentAccount.txt");
                            FileReader fr = new FileReader(f);
                            BufferedReader bfr = new BufferedReader(fr);
                            String line = bfr.readLine();
                            usernameStatus = 1;
                            int[] counter = new int[1];
                            ArrayList<String> accountList = new ArrayList<>();
                            ArrayList<String> passwordList = new ArrayList<>();

                            while (line != null) {
                                accountList.add(line);
                                if (Username.equals(line)) {
                                    counter[0]++;
                                }
                                line = bfr.readLine();
                            }
                            bfr.close();
                            if (counter[0] == 0) {
                                System.out.println(UsernameDoesNotExist);
                                break;
                            } else {
                                System.out.println(LoginPassword);
                                String Password = scan.nextLine();
                                File f2 = new File("StudentPassword.txt");
                                FileReader fr2 = new FileReader(f2);
                                BufferedReader bfr2 = new BufferedReader(fr2);
                                String line2 = bfr2.readLine();

                                while (line2 != null) {
                                    passwordList.add(line2);
                                    line2 = bfr2.readLine();
                                }
                                bfr2.close();
                                if (accountList.indexOf(Username) == passwordList.indexOf(Password)) {
                                    try {
                                        System.out.println(editAccount);
                                        int edit = Integer.parseInt(scan.nextLine());
                                        if (edit == 1) {
                                            System.out.println(MakeUsername);
                                            String username = scan.nextLine();
                                            accountList.set(accountList.indexOf(Username), username);
                                            File studentAccount = new File("StudentAccount.txt");
                                            FileOutputStream fos2 = new FileOutputStream(studentAccount, false);
                                            PrintWriter pw2 = new PrintWriter(fos2);

                                            for (int i = 0; i < accountList.size(); i++) {
                                                pw2.println(accountList.get(i));
                                            }
                                            pw2.close();
                                        } else if (edit == 2) {
                                            System.out.println(MakePassword);
                                            String password = scan.nextLine();
                                            passwordList.set(passwordList.indexOf(Password), password);
                                            File studentPassword = new File("StudentPassword.txt");
                                            FileOutputStream fos2 = new FileOutputStream(studentPassword, false);
                                            PrintWriter pw2 = new PrintWriter(fos2);

                                            for (int i = 0; i < accountList.size(); i++) {
                                                pw2.println(passwordList.get(i));
                                            }
                                            pw2.close();
                                        }
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                    return "";
                                } else {
                                    System.out.println(WrongPassword);
                                    break;
                                }
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        }
        return "";
    }

    private static void checkFile() {
        File tAccount = new File("TeacherAccount.txt");
        try {
            if (tAccount.exists()) {

            } else {
                tAccount.createNewFile();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        File tPassword = new File("TeacherPassword.txt");
        try {
            if (tPassword.exists()) {

            } else {
                tPassword.createNewFile();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        File sAccount = new File("StudentAccount.txt");
        try {
            if (sAccount.exists()) {

            } else {
                sAccount.createNewFile();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        File sPassword = new File("StudentPassword.txt");
        try {
            if (sPassword.exists()) {

            } else {
                sPassword.createNewFile();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void startQuiz(String quizName, String userName, String teacherName, String courseName, String plainQuizName) throws
    IOException {
    BufferedReader br = new BufferedReader(new FileReader(quizName));
    File f = new File(userName + "_" + teacherName + "_" + courseName + "_" + plainQuizName + ".txt");
    BufferedWriter bw = new BufferedWriter(new FileWriter(f));
    String nextLine = "";
    String shuffleStatus = br.readLine();
    String copy = "";
    String totalCopy = "";
    String importedFile = "";
    String copyQuiz = "";
    int counter = 0;
    int loop = 0;
    int number = 1;
    String firstLine;
    String secondLine;
    String thirdLine;
    String fourthLine;
    while ((nextLine = br.readLine()) != null) {
        firstLine = br.readLine();
        secondLine = br.readLine();
        thirdLine = br.readLine();
        fourthLine = br.readLine();
        System.out.println(number + ". " + nextLine + "\n" + firstLine + "\n" + secondLine +
                "\n" + thirdLine + "\n" + fourthLine);
        copyQuiz = copyQuiz + nextLine + "\n" + firstLine + "\n" + secondLine +
                "\n" + thirdLine + "\n" + fourthLine + "\n";
        counter++;
        number++;
    }
    br.close();
    System.out.println("Would you like to attach a file with answers or answer in the quiz?");
    System.out.println("1. attach a file\n2. answer in the quiz");
    while (loop == 0) {
        String option = scan.nextLine();
        if (option.equals("1")) {
            System.out.println("Enter the name of the file you would like to import:");
            importedFile = scan.nextLine();
            BufferedReader bufferedReader3 = new BufferedReader(new FileReader(importedFile));
            while ((copy = bufferedReader3.readLine()) != null) {
                totalCopy = totalCopy + copy + "\n";
            }
            loop++;
        } else if (option.equals("2")) {
            for (int i = 1; i <= counter; i++) {
                System.out.println("What is the answer to question " + i + ":");
                totalCopy = totalCopy + scan.nextLine().toUpperCase() + "\n";
            }
            loop++;
        } else {
            System.out.println("Invalid Input: Try Again");
        }
    }
    System.out.println("Thanks for taking the quiz!");
    String timeStamp = new SimpleDateFormat("MM/dd/yyyy_HH:mm:ss").format(Calendar.getInstance().getTime());
    totalCopy = shuffleStatus + "\n" + copyQuiz + userName + "\n" + totalCopy + timeStamp;
    bw.write(totalCopy);
    bw.close();

}

    public String pickCourse(String filename) {
    String courseName = null;
    try {
        File course = new File(filename);
        FileReader frcourse = new FileReader(course);
        BufferedReader bfrCourse = new BufferedReader(frcourse);
        BufferedReader br = new BufferedReader(new FileReader(filename));
        courseName = "";
        if (br.readLine() == null) {
            System.out.println("Your teacher has not created any courses");
            courseName = "end";
            br.close();
        } else {
            br.close();
            String line = bfrCourse.readLine();
            int counter = 0;
            System.out.println("Course Options:");
            while (line != null) {
                counter++;
                System.out.println(counter + ". " + line);
                line = bfrCourse.readLine();
            }
            System.out.println((counter + 1) + ". Exit");
            int courseSelector = 0;
            do {
                System.out.println("Please select which course you would like to take?");
                courseSelector = scan.nextInt();
                scan.nextLine();
                if (courseSelector <= 0 || courseSelector > counter + 1) {
                    System.out.println("Please enter a valid course id!");
                }
            } while (courseSelector <= 0 || courseSelector > counter + 1);

            if (courseSelector == counter + 1) {
                courseName = "end";
            } else {
                BufferedReader bfr = new BufferedReader(new FileReader(filename));
                for (int i = 0; i < courseSelector; i++) {
                    courseName = bfr.readLine();
                }
                bfr.close();
                bfrCourse.close();
            }
        }
    } catch (IOException io) {
        io.printStackTrace();
    }
    return courseName;
}

    public String pickQuiz(String filename) {
    String courseName = null;
    try {
        File course = new File(filename);
        FileReader frcourse = new FileReader(course);
        BufferedReader bfrCourse = new BufferedReader(frcourse);
        BufferedReader br = new BufferedReader(new FileReader(filename));
        courseName = "";
        if (br.readLine() == null) {
            courseName = "empty";
            br.close();
        } else {
            br.close();
            String line = bfrCourse.readLine();
            int counter = 0;
            System.out.println("Quiz Options:");
            while (line != null) {
                counter++;
                System.out.println(counter + ". " + line);
                line = bfrCourse.readLine();
            }
            System.out.println((counter + 1) + ". Exit");
            int courseSelector = 0;
            do {
                System.out.println("Please select which quiz you would like to take?");
                courseSelector = scan.nextInt();
                scan.nextLine();
                if (courseSelector <= 0 || courseSelector > counter + 1) {
                    System.out.println("Please enter a valid quiz id!");
                }
            } while (courseSelector <= 0 || courseSelector > counter + 1);


            if (courseSelector == counter + 1) {
                courseName = "end";
            } else {
                BufferedReader bfr = new BufferedReader(new FileReader(filename));
                for (int i = 0; i < courseSelector; i++) {
                    courseName = bfr.readLine();
                }
                bfr.close();
                bfrCourse.close();
            }
        }
    } catch (IOException io) {
        io.printStackTrace();
    }
    return courseName;
}


    public void mainStudent() {
    //takes place after login
    Scanner scan = new Scanner(System.in);
    try {
        //creates Student object
        int n = 0;
        String teacher = null; //initiates string to store teachers username
        while (n == 0) {
            BufferedReader br = new BufferedReader(new FileReader("TeacherAccount.txt"));
            System.out.println("What is the username of your teacher?");
            teacher = scan.nextLine(); //user input to teacher string
            String newLine = "";
            boolean validTeacher = false;  //boolean which states whether or not the teacher account exists
            while ((newLine = br.readLine()) != null) { //looks for inputted teacher username in accounts file
                if (newLine.equals(teacher)) {
                    validTeacher = true;
                    break;
                }
            }
            if (validTeacher == false) {
                System.out.println("Teacher does not exist");
            } else {
                n++;
            }
        }
        if (!new File(teacher + "_Courses.txt").exists()) { //prints error if the teacher has not created any courses
            System.out.println("Your teacher has not created any courses");
            return;
        }
        int loop = 0; //initiates looping variable

        do {
            String course = this.pickCourse(teacher + "_Courses.txt"); //runs method to have student pick a course
            if (course.equals("end")) {  //breaks out of loops is "end" is returned for pickCourse method
                break;
            }
            int z = 0;
            if (!new File(teacher + "_" + course + ".txt").exists()) {
                while (z == 0) {
                    System.out.println("There are no quizzes in this course");
                    System.out.println("1. Return to course selection\n2. Exit");
                    String pick = scan.nextLine();
                    if (pick.equals("1")) {
                        z++;
                    } else if (pick.equals("2")) {
                        return;
                    } else {
                        System.out.println("INVALID INPUT");
                    }
                }
            } else {
                String quiz = this.pickQuiz(teacher + "_" + course + ".txt"); //runs method to have student pick a quiz
                System.out.println(quiz);
                if (quiz.equals("end")) {
                    break;
                } else if (quiz.equals("empty")) { //if there is a file created but is empty
                    int y = 0;
                    while (y == 0) {
                        System.out.println("There are no quizzes in this course");
                        System.out.println("1. Return to course selection\n2. Exit");
                        String pick = scan.nextLine();
                        if (pick.equals("1")) {
                            y++;
                        } else if (pick.equals("2")) {
                            return;
                        } else {
                            System.out.println("INVALID INPUT");
                        }
                    }
                } else {
                    BufferedReader bufferedReader2 = new BufferedReader(new FileReader(teacher + "_" + course + "_" + quiz + ".txt"));
                    String shuffleStatus = bufferedReader2.readLine(); //whether or not to shuffle the quiz
                    if (shuffleStatus.equalsIgnoreCase("True")) {
                        this.shuffle(teacher + "_" + course + "_" + quiz + ".txt"); //shuffles quiz
                    }
                    if (!new File(this.userName + "_" + teacher + "_" + course + "_" + quiz + ".txt").exists()) { //checks if quiz has already been taken. if not then runs the quiz
                        this.startQuiz(teacher + "_" + course + "_" + quiz + ".txt", this.userName, teacher, course, quiz);
                    } else {
                        System.out.println("Quiz already taken");
                        int optionLoop = 0;
                        while (optionLoop == 0) {
                            System.out.println("1. View Quiz Grade\n2. Exit Back to Courses");
                            String viewGrade = scan.nextLine();
                            if (viewGrade.equals("1")) {
                                File f = new File(this.userName + "_" + teacher + "_" + course + "_" + quiz + ".txt");
                                BufferedReader brquiz = new BufferedReader(new FileReader(f));
                                String quizLine = brquiz.readLine();
                                int cline = 0;
                                while (quizLine != null) {
                                    cline++;
                                    quizLine = brquiz.readLine(); //reads through all line
                                }
                                BufferedReader brquiz2 = new BufferedReader(new FileReader(f)); //reads the same quiz with new bfr
                                BufferedReader gradeSetter = new BufferedReader(new FileReader(f));
                                String lastLine = "";
                                String grade = "";
                                for (int i = 0; i < cline; i++) {
                                    lastLine = brquiz2.readLine();
                                }
                                brquiz.close();
                                String nextLine1 = "";
                                while (!(nextLine1 = gradeSetter.readLine()).equals(userName)) {
                                }


                                if (lastLine.substring(lastLine.length() - 1).equals("%")) {
                                    while (nextLine1 != null) {
                                        grade = grade + nextLine1 + "\n";
                                        nextLine1 = gradeSetter.readLine();
                                    }
                                } else {
                                    grade = "Grade not yet entered";
                                }
                                System.out.println(grade);
                                loop++;
                                optionLoop++;
                            } else if (viewGrade.equals("2")) {
                                optionLoop++;
                            } else {
                                System.out.println("Invalid Input. Try again.");
                            }
                        }
                    }
                }
            }
        } while (loop == 0);
    } catch (Exception e) {
        e.printStackTrace();
    }

}

    public void shuffle(String filename) throws IOException {   //Shuffles the question order and the answer order of the quiz file
    ArrayList<String> questions = new ArrayList<>();   //array that stores full questions with answers attached
    File f = new File(filename);
    BufferedReader br = new BufferedReader(new FileReader(f));
    BufferedReader bfr = new BufferedReader(new FileReader(filename));
    String line = "";       //initiates a string
    int numq = 1;
    String shuffleStatus = bfr.readLine();
    while (bfr.readLine() != null) {
        numq++;           //counts the number of lines in file
    }
    bfr.close();
    numq = numq / 5;   //counts number of questions
    int lineNum = 1;
    int mult = 0;
    br.readLine();
    while(line != null){
        line = br.readLine();
        ++lineNum;
        if(lineNum == ( 2 + 5 * mult) && mult <= numq && line != null){
            mult++;
            String q = "";
            String ans = "";
            q = line + "\n";
            lineNum++;
            q += br.readLine() + "\n";
            lineNum++;
            q += br.readLine() + "\n";
            lineNum++;
            q += br.readLine() + "\n";
            lineNum++;
            q += br.readLine() + "\n";
            questions.add(q);
        }
    }
    br.close();
    Collections.shuffle(questions);  //shuffles question order

    ArrayList<String> newQuestions = new ArrayList<>(); //list that new shuffled answers will be stored in
    for (int i = 0; i < questions.size(); i++) {
        String wholeQuestion = questions.get(i); //stores one question
        String q = wholeQuestion.substring(0, wholeQuestion.indexOf("\n")); //question line
        String answerOptions = wholeQuestion.substring(wholeQuestion.indexOf("\n"));
        answerOptions = answerOptions.substring(1);
        String a = answerOptions.substring(0, answerOptions.indexOf("\n"));
        String a1 = a.substring(3);   //answer option A without "A. "
        answerOptions = answerOptions.substring(answerOptions.indexOf("\n"));
        answerOptions = answerOptions.substring(1);
        String b = answerOptions.substring(0, answerOptions.indexOf("\n"));
        String b1 = b.substring(3); //answer option B without "B. "
        answerOptions = answerOptions.substring(answerOptions.indexOf("\n"));
        answerOptions = answerOptions.substring(1);
        String c = answerOptions.substring(0, answerOptions.indexOf("\n"));
        String c1 = c.substring(3);  //answer option C without "C. "
        answerOptions = answerOptions.substring(answerOptions.indexOf("\n"));
        answerOptions = answerOptions.substring(1);
        String d = answerOptions.substring(0, answerOptions.indexOf("\n"));
        String d1 = d.substring(3);  //answer option D without "D. "
        ArrayList<String> answerHolder = new ArrayList<>(); //holds answer options
        answerHolder.add(a1);
        answerHolder.add(b1);
        answerHolder.add(c1);
        answerHolder.add(d1);
        Collections.shuffle(answerHolder); //shuffles answer options
        String answerI = "";
        for (int j = 0; j < 4; j++) { //attaches an "A. ", "B. ", "C. ", or "D. " in front of answer option
            if (j == 0) {
                answerI += ("\n" + "A. " + answerHolder.get(j));
            } else if (j == 1) {
                answerI += ("\nB. " + answerHolder.get(j));
            } else if (j == 2) {
                answerI += ("\nC. " + answerHolder.get(j));
            } else if (j == 3) {
                answerI += ("\nD. " + answerHolder.get(j));
            }
        }

        String total = q + answerI;
        newQuestions.add(total);  //string of answer options
    }
    BufferedWriter bw = new BufferedWriter(new FileWriter(filename)); //new buffered writer to write back to quiz file
    bw.write(shuffleStatus); //writes "True" at top of file
    bw.write("\n");
    for (int k = 0; k < newQuestions.size(); k++) { //writes full shuffled quiz back to file
        if (k < newQuestions.size() - 1) {
            bw.write(newQuestions.get(k));
            bw.write("\n");
        } else {
            bw.write(newQuestions.get(k));
        }
    }
    bw.close();
    }

    public void createCourse() {
        System.out.println("Enter the name of the new course or press N to exit");
        String temp = scan.next();      //Temp used to fix scanner errors
        String courseName = temp + scan.nextLine(); //The course name that the teacher wants
        if (courseName.equals("N")) {
            return;
        }
        try {
            File f1 = new File(this.userName + "_Courses.txt");  //The courses file for the teacher
            PrintWriter pw = new PrintWriter(new FileOutputStream(f1, true));   //Printer writer for the f1
            File f2 = new File(this.userName + "_" + courseName + ".txt");   //File that holds the quizzes for the
            //given course
            f2.createNewFile();
            pw.println(courseName);
            pw.close();
            System.out.println("Course added successfully");
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    /**
     * Deletes a course that the teacher enters if it exists. The course is removed from the courses text file
     * that the teacher has and removes the file that holds the quizzes for the course
     */
    public void deleteCourse() {
        String courseName;      //The course to be deleted
        ArrayList<String> list = new ArrayList<>();     //List to hold the file contents
        File f1;    //File to check if the given course exists
        do {
            System.out.println("Enter the name of the course you want to delete or press N to exit");
            String temp = scan.next();
            courseName = temp + scan.nextLine();
            f1 = new File(this.userName + "_" + courseName + ".txt");
            if (courseName.equals("N")) {
                return;
            } else if (!f1.exists()) {
                System.out.print("That course does not exist. ");
            }

        } while (!f1.exists());
        File f = new File(this.userName + "_Courses.txt");   //File that holds the courses for the teacher
        try {
            BufferedReader bfr = new BufferedReader(new FileReader(f));  //Buffered reader for the courses file
            String line = bfr.readLine();   //Reads the line in the reader
            while (line != null) {
                if (!line.equals(courseName)) {
                    list.add(line);
                    line = bfr.readLine();
                } else {
                    line = bfr.readLine();
                }
            }
            BufferedReader bfr2 = new BufferedReader(new FileReader(f1));
            line = bfr2.readLine();
            while(line != null) {
                File quizFile = new File(this.userName + "_" + courseName + "_" + line + ".txt");
                quizFile.delete();
                File answerFIle = new File(this.userName + "_" + courseName + "_" + line + "_correctAnswers.txt");
                answerFIle.delete();
                line = bfr2.readLine();
            }

            PrintWriter pw = new PrintWriter(new FileOutputStream(f));  //Print writer that will go over the courses
            //file and rewrite the file without the given course
            for (int i = 0; i < list.size(); i++) {
                pw.println(list.get(i));
            }

            pw.close();
            bfr.close();
            bfr2.close();

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        File f3 = new File(this.userName + "_" + courseName + ".txt");  //File that holds the quizzes for the course
        f3.delete();
        System.out.println("Course deleted successfully!");




    }

    /**
     * Creates a quiz with a given course name and quiz name. The text file that holds the quiz is specific and must
     * be written in that way in order to work
     */
    public void createQuiz() {
        String courseName;  //The name of the course the quiz is going to be in
        String quizName;    //The name of the quiz to be created
        int contains = 0;   //Used to determine if the course is contained in the courses text file
        PrintWriter pw = null;  //Print writer used to write the quiz file
        PrintWriter pw2 = null;  //Print writer used to write the correct quiz answer file
        boolean randomized = false; // Used to determine if the teacher wants the quiz to be randomized
        File courseFile;    //Used to determine if the course file exists
        String temp;    //Used to help fix scanner issues
        do {
            System.out.println("Enter the course name or press N to exit");
            temp = scan.next();
            courseName = temp + scan.nextLine();
            if (courseName.equals("N")) {
                return;
            }
            courseFile = new File(this.userName + "_" + courseName + ".txt");
            if (courseFile.exists()) {
                contains = 1;
            }
            if (contains == 0) {
                System.out.print("This course does not exist. ");
            }
        } while (contains == 0);
        System.out.println("Enter the name of the quiz or press N to exit");
        temp = scan.next();
        quizName = temp + scan.nextLine();
        if (quizName.equals("N")) {
            return;
        }
        File courseQuiz = new File(this.userName + "_" + courseName + ".txt");   //The file that holds the quizzes
        PrintWriter pw3 = null; //Print writer that writes the quiz name into the file that holds the quizzes
        try {
            pw3 = new PrintWriter(new FileOutputStream(courseQuiz, true));
            pw3.println(quizName);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        int imported = 0;   //Used to determine if the teacher wants to import a file or not
        do {
            System.out.println("Do you want to create a quiz or import a quiz? Press N to exit\n1: Create\n2: Import");
            temp = scan.next();
            String importedString = temp + scan.nextLine();     //Used to determine what the teacher answered
            if (importedString.equals("N")) {
                return;
            }
            try {
                imported = Integer.parseInt(importedString);
                if (imported < 1 || imported > 2) {
                    throw new NumberFormatException();
                }
            } catch (NumberFormatException e) {
                System.out.println("Not an option");
                imported = 0;
            }
        } while (imported < 1 || imported > 2);
        if (imported == 2) {
            System.out.println("What is the filepath of the quiz?");
            temp = scan.next();
            String filePath = temp + scan.nextLine();   //Used to determine what the teacher answered for the filepath
            File f = new File(filePath);    //The file for the filepath the teacher answered
            if (!f.exists()) {
                do {
                    System.out.println("That file does not exist. Enter a new file or press N to exit");
                    temp = scan.next();
                    filePath = temp + scan.nextLine();
                    f = new File(filePath);
                    if (filePath.equals("N")) {
                        return;
                    }
                } while (!f.exists());

            }
            try {
                ArrayList<String> importList = new ArrayList<>();   //List to hold the lines within the import file
                BufferedReader bfr = new BufferedReader(new FileReader(f));   //Buffered reader that reads the
                //import file
                String line = bfr.readLine();   //Reads the next line in the buffered reader
                while (line != null) {
                    importList.add(line);
                    line = bfr.readLine();
                }
                File f2 = new File(this.userName + "_" + courseName + "_" + quizName + ".txt");  //File for the quiz
                f.createNewFile();
                PrintWriter pw4 = new PrintWriter(new FileOutputStream(f2));  //Print writer for the quiz
                for (int i = 0; i < importList.size(); i++) {
                    pw4.println(importList.get(i));
                }
                System.out.println("The quiz has been created");
                pw4.close();
                bfr.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            String stringRandom;    //Determines if the teacher wants the quiz randomized or not
            do {
                System.out.println("Do you want the quiz to be randomized? Y/N. Press E to exit.");
                temp = scan.next();
                stringRandom = temp + scan.nextLine();

                if (stringRandom.equals("E")) {
                    return;
                } else if (stringRandom.equals("Y")) {
                    randomized = true;
                } else if (stringRandom.equals("N")) {
                    randomized = false;
                } else {
                    System.out.println("Not an option");
                    stringRandom = null;
                }
            } while (stringRandom == null);


            try {
                File f = new File(this.userName + "_" + courseName + "_" + quizName + ".txt");   //File for the quiz
                pw = new PrintWriter(new FileOutputStream(f));
                File f2 = new File(this.userName + "_" + courseName + "_" + quizName + "_correctAnswers.txt");  //File
                //for the answer sheet
                pw2 = new PrintWriter(new FileOutputStream(f2));


            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
            int count = 1;
            int choice = 1;

            do {
                System.out.println("Do you want to add a question?");
                System.out.println("1.Yes");
                System.out.println("2.No");
                try {
                    choice = scan.nextInt();
                } catch (Exception exception) {
                    System.out.println("Not an option");
                }
                if (choice != 1 && choice != 2) {
                    System.out.println("Not an option");
                }
            } while (choice != 1 && choice != 2);
            pw.println(randomized);
            while (choice == 1) {

                System.out.println("Please type question " + count);
                temp = scan.next();
                String givenQuestion = temp + scan.nextLine();  //Holds the question to be asked
                System.out.println("Please type answer option A");
                temp = scan.next();
                String answerA = temp + scan.nextLine();    //Holds the answer choice A
                System.out.println("Please type answer option B");
                temp = scan.next();
                String answerB = temp + scan.nextLine();    //Holds the answer choice B
                System.out.println("Please type answer option C");
                temp = scan.next();
                String answerC = temp + scan.nextLine();    //Holds the answer choice C
                System.out.println("Please type answer option D");
                temp = scan.next();
                String answerD = temp + scan.nextLine();    //Holds the answer choice D
                String correctAnswer;       //Holds the correct ansewr choice
                do {
                    System.out.println("Please enter the correct answer choice A, B, C or D");
                    temp = scan.next();
                    correctAnswer = temp + scan.nextLine();
                    if (!correctAnswer.equals("A") && !correctAnswer.equals("B") && !correctAnswer.equals("C")
                            && !correctAnswer.equals("D")) {
                        System.out.println("That is not an option");
                    }
                } while (!correctAnswer.equals("A") && !correctAnswer.equals("B") && !correctAnswer.equals("C")
                        && !correctAnswer.equals("D"));
                count = count + 1;

                pw.println(givenQuestion);
                pw.println("A. " + answerA);
                pw.println("B. " + answerB);
                pw.println("C. " + answerC);
                pw.println("D. " + answerD);
                pw2.println(correctAnswer);
                do {
                    System.out.println("Do you want to add another question?");
                    System.out.println("1.Yes");
                    System.out.println("2.No");
                    choice = scan.nextInt();
                    if (choice != 1 && choice != 2) {
                        System.out.println("Not an option");
                    }
                } while (choice != 1 && choice != 2);
            }

            System.out.println("The quiz is completed");

            pw.close();
            pw2.close();
            pw3.close();
            pw2.close();
        }
    }

    /**
     * Allows the user to edit the quiz by changing a certain line or adding more questions. If the true or false is
     * removed from the top of the quiz, the quiz will be read as already being graded.
     */
    public void editQuiz() {
        ArrayList<String> list = new ArrayList<>(); //List to help print out the contents of the quiz
        String temp;    //Used to help fix scanner issues
        String courseName;  //The name of the course
        File courseFile;    //The file for the course
        File f2;    //The file for the quiz
        do {
            System.out.println("Enter the course the quiz is in or press N to exit");
            temp = scan.next();
            courseName = temp + scan.nextLine();
            courseFile = new File(this.userName + "_" + courseName + ".txt");
            if (courseName.equals("N")) {
                return;
            }

            if (!courseFile.exists()) {
                System.out.print("That course does not exist. ");
            }
        } while (!courseFile.exists());
        System.out.println("Enter the name of the quiz you want to edit or press N to exit.");
        temp = scan.next();
        String quizName = temp + scan.nextLine();
        if (quizName.equals("N")) {
            return;
        }
        do {
            f2 = new File(this.userName + "_" + courseName + "_" + quizName + ".txt");
            if (quizName.equals("N")) {
                return;
            }
            else if (!f2.exists()) {
                System.out.println("That quiz does not exist. Enter another quiz or press N to exit");
                temp = scan.next();
                quizName = temp + scan.nextLine();
                f2 = new File(this.userName + "_" + courseName + "_" + quizName);

            }

        } while (!f2.exists());
        try {
            int counter = 1;    //Counter to show the line numbers
            String lineNumber;  //Used to determine what the user wants to do
            String newLine = "";    //Determine what the new line should say
            int newLineNumber = 0;  //Determine which line the teacher wants to edit
            BufferedReader bfr = new BufferedReader(new FileReader(f2));    //Buffered reader for the quiz file
            String line = bfr.readLine();   //Used to read the next line in the buffered reader
            while (line != null) {
                System.out.println(counter + ": " + line);
                list.add(line);
                line = bfr.readLine();
                counter++;
            }

            System.out.println("Enter the number of the line you would like to edit, press Y to add more questions," +
                    " or press N to exit");
            temp = scan.next();
            lineNumber = temp + scan.nextLine();
            do {
                newLine = "";
                if (lineNumber.equals("N")) {
                    return;
                } else if (lineNumber.equals("Y")) {
                    File answers = new File(this.userName + "_" + courseName + "_" + quizName + "_correctAnswers.txt");
                    //The correct answers file
                    PrintWriter pw5 = new PrintWriter(new FileOutputStream(answers, true));     //The print
                    //writer for the answer sheet
                    PrintWriter pw2 = new PrintWriter(new FileOutputStream(f2, true));  //The print writer
                    //for the quiz file
                    int choice = 0; //Determine if the user would like to add anohter question
                    while (choice == 0) {
                        System.out.println("Please type the next question");
                        temp = scan.next();
                        String givenQuestion = temp + scan.nextLine();  //Holds the question string
                        System.out.println("Please type answer option A");
                        temp = scan.next();
                        String answerA = temp + scan.nextLine();        //Holds the answer A option
                        System.out.println("Please type answer option B");
                        temp = scan.next();
                        String answerB = temp + scan.nextLine();        //Holds the answer B option
                        System.out.println("Please type answer option C");
                        temp = scan.next();
                        String answerC = temp + scan.nextLine();        //Holds the answer C option
                        System.out.println("Please type answer option D");
                        temp = scan.next();
                        String answerD = temp + scan.nextLine();        //Holds the answer D option
                        String correctAnswer;       //Holds the correct answer
                        do {
                            System.out.println("Please enter the correct answer choice A, B, C or D");
                            temp = scan.next();
                            correctAnswer = temp + scan.nextLine();
                            if (!correctAnswer.equals("A") && !correctAnswer.equals("B") && !correctAnswer.equals("C")
                                    && !correctAnswer.equals("D")) {
                                System.out.println("That is not an option");
                            }
                        } while (!correctAnswer.equals("A") && !correctAnswer.equals("B") && !correctAnswer.equals("C")
                                && !correctAnswer.equals("D"));

                        pw2.println(givenQuestion);
                        pw2.println("A. " + answerA);
                        pw2.println("B. " + answerB);
                        pw2.println("C. " + answerC);
                        pw2.println("D. " + answerD);
                        pw5.println(correctAnswer);
                        do {
                            System.out.println("Do you want to add another question?");
                            System.out.println("1.Yes");
                            System.out.println("2.No");
                            choice = scan.nextInt();
                            if (choice != 1 && choice != 2) {
                                System.out.println("Not an option");
                            }
                        } while (choice != 1 && choice != 2);
                    }

                } else {
                    try {
                        newLineNumber = Integer.parseInt(lineNumber);
                        if (newLineNumber < 1 || newLineNumber > list.size()) {
                            throw new NumberFormatException();
                        }
                    } catch (NumberFormatException e) {
                        System.out.println("Not an option");
                        System.out.println("Enter the number of the line you would like to edit, press Y to " +
                                "add more questions, or press N to exit");
                        temp = scan.next();
                        lineNumber = temp + scan.nextLine();
                        newLineNumber = 0;

                    }
                }
            } while (newLineNumber < 1 || newLineNumber > list.size());
            System.out.println(list.get(newLineNumber - 1));
            System.out.println("What should the line say now?");
            temp = scan.next();
            newLine = temp + scan.nextLine();

            list.set(newLineNumber - 1, newLine);
            PrintWriter pw = new PrintWriter(new FileOutputStream(f2));    //Print writer for the quiz
            for (int i = 0; i < list.size(); i++) {
                pw.println(list.get(i));
            }
            System.out.println("Quiz edited successfully");
            pw.close();
            bfr.close();

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    /**
     * Deletes a quiz with the given course name and quiz name. The quiz is deleted from the course file that holds
     * the quizzes.
     */
    public void deleteQuiz() {
        String courseName;  //The course name for the quiz
        File courseFile;    //The file for the course
        do {
            System.out.println("Enter the course the quiz is in or press N to exit");
            String temp = scan.next();  //Help fix scanner errors
            courseName = temp + scan.nextLine();
            courseFile = new File(this.userName + "_" + courseName + ".txt");
            if (courseName.equals("N")) {
                return;
            } else if (!courseFile.exists()) {
                System.out.print("That course does not exist. ");
            }
        } while (!courseFile.exists());
        File file;  //File for the quiz
        File file2; //File for the answer sheet
        do {
            System.out.println("Enter the name of the quiz you want to delete or press N to exit");
            String temp = scan.next();      //Helps fix scanner errors
            String quizName = temp + scan.nextLine();   //The quiz name the teacher entered
            file = new File(this.userName + "_" + courseName + "_" + quizName + ".txt");
            file2 = new File(this.userName + "_" + courseName + "_" + quizName + "_correctAnswers.txt");
            if (quizName.equals("N")) {
                return;
            } else if (!file.exists()) {
                System.out.print("That file does not exist. ");
            }
        } while (!file.exists());
        file.delete();
        file2.delete();
        System.out.println("File deleted successfully");
    }

    /**
     * Lets the teacher see the a certain students quiz submission. A student name, a course name, and a quiz name are
     * needed
     */
    public void viewStudentSubmission() {
        String student;     //The student whose submission will be viewed
        String courseName;  //The course name
        String quizName;    //The quiz name
        String temp;    //Helps fix scanner errors
        ArrayList<String> studentNames = new ArrayList<>(); //List that holds the current students names
        File courseFile;    //The file for the course
        File studentFile = new File("StudentAccount.txt");  //The file that holds the student names
        try {
            BufferedReader bfr = new BufferedReader(new FileReader(studentFile));   //Buffered reader for student file
            String line = bfr.readLine();   //Reads the next line in the buffered reader
            while (line != null) {
                studentNames.add(line);
                line = bfr.readLine();
            }
        } catch (IOException e) {
            System.out.println("No students have been added");
            return;
        }
        do {
            System.out.println("Enter the name of the student you would like to view or press N to exit");
            temp = scan.next();
            student = temp + scan.nextLine();
            if (student.equals("N")) {
                return;
            } else if (studentNames.indexOf(student) < 0) {
                System.out.print("That student does not exist. ");
            }
        } while (studentNames.indexOf(student) < 0);

        do {
            System.out.println("Enter the course or press N to exit");
            temp = scan.next();
            courseName = temp + scan.nextLine();
            courseFile = new File(this.userName + "_" + courseName + ".txt");
            if (courseName.equals("N")) {
                return;
            } else if (!courseFile.exists()) {
                System.out.print("That course does not exist. ");
            }
        } while (!courseFile.exists());
        File quizFile;  //File for the quiz
        do {
            System.out.println("Enter the name of the quiz or press N to exit");
            temp = scan.next();
            quizName = temp + scan.nextLine();
            if (quizName.equals("N")) {
                return;
            }
            quizFile = new File(student + "_" + this.userName + "_" + courseName + "_" + quizName + ".txt");
            if (!quizFile.exists()) {
                System.out.print("This quiz does not exist. ");
            }
        } while (!quizFile.exists());

        try {
            BufferedReader bfr = new BufferedReader(new FileReader(quizFile)); //Buffered reader for the quiz file
            String line = bfr.readLine();   //Reads the next line in the buffered reader
            while (line != null) {
                System.out.println(line);
                line = bfr.readLine();
            }
            bfr.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /*public void automaticGrade() {
        String student;
        String course;
        String quizName;
        int numCorrect;
        int totalQuestions;
        System.out.println("Enter the name of the student you would like to view");
        student = scan.next();
        System.out.println("Enter the quiz course");
        course = scan.next();
        System.out.println("Enter the name of the quiz");
        quizName = scan.next();
        File studentQuiz = new File(student + "_" + name + "_" + course + "_" + quizName);
        if (!studentQuiz.exists()) {
            System.out.println("This quiz does not exist");
        } else {
            File teacherQuiz = new File(name + "_" + quizName);
            try {
                BufferedReader bfr1 = new BufferedReader(new FileReader(studentQuiz));
                BufferedReader bfr2 = new BufferedReader(new FileReader(teacherQuiz));
                String line1 = bfr1.readLine();
                String line2 = bfr2.readLine();
                while (line2 != null) {
                    bfr1.
                }
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }*/

    /**
     * Allows the teacher to manually grade a students quiz
     */

    public void manualGrade() {
        String student; //The student whose quiz will be graded
        String courseName;  //The course the quiz is in
        String quizName;    //The quiz name
        String temp;    //Used to help fix scanner issues
        int numCorrect = 0; //Determines the number of correct answers
        ArrayList<String> studentNames = new ArrayList<>(); //Stores the student names
        File courseFile;    //Holds the course file
        File studentFile = new File("StudentAccount.txt");  //File for the student file
        try {
            BufferedReader bfr = new BufferedReader(new FileReader(studentFile));   //Buffered reader for student file
            String line = bfr.readLine();   //Reads the next line
            while (line != null) {
                studentNames.add(line);
                line = bfr.readLine();
            }
        } catch (IOException e) {
            System.out.println("No student has been added");
            return;
        }
        do {
            System.out.println("Enter the name of the student you would like to view or press N to exit");
            temp = scan.next();
            student = temp + scan.nextLine();
            if (student.equals("N")) {
                return;
            } else if (studentNames.indexOf(student) < 0) {
                System.out.print("That student does not exist. ");
            }
        } while (studentNames.indexOf(student) < 0);
        do {
            System.out.println("Enter the quiz course or press N to exit");
            temp = scan.next();
            courseName = temp + scan.nextLine();
            if (courseName.equals("N")) {
                return;
            }
            courseFile = new File(this.userName + "_" + courseName + ".txt");
            if (!courseFile.exists()) {
                System.out.print("That course does not exist. ");
            }
        } while (!courseFile.exists());
        File quizFile;  //The file for the quiz
        do {
            System.out.println("Enter the name of the quiz or press N to exit");
            temp = scan.next();
            quizName = temp + scan.nextLine();
            if (quizName.equals("N")) {
                return;
            }
            quizFile = new File(this.userName + "_" + courseName + "_" + quizName + ".txt");
            if (!quizFile.exists()) {
                System.out.print("That quiz does not exist. ");
            }
        } while (!quizFile.exists());
        File studentQuiz = new File(student + "_" + this.userName + "_" + courseName + "_" + quizName + ".txt");
        //The file for the student's quiz
        if (!studentQuiz.exists()) {
            System.out.println("This student has not taken the quiz");
            return;
        } else {
            try {
                BufferedReader bfrQuestions = new BufferedReader(new FileReader(studentQuiz));  //Buffered reader for
                //the student quiz and reading the questions
                BufferedReader bfrAnswers = new BufferedReader(new FileReader(studentQuiz));    //Buffered reader for
                //the student quiz and reading the answer
                ArrayList<String> entireFile = new ArrayList<>();   //List to hold the files entire contents
                ArrayList<String> correct = new ArrayList<>();  //List to hold the teachers yes or no answers
                String questionLine = bfrQuestions.readLine();  //Reads the next line in the question buffered reader
                if (questionLine.equals("true") || questionLine.equals("false")) {
                    questionLine = bfrQuestions.readLine();
                    String answerLine = bfrAnswers.readLine();  //Reads the next line in the answer buffered reader
                    while (!answerLine.equals("A") && !answerLine.equals("B") && !answerLine.equals("C") &&
                            !answerLine.equals("D")) {
                        answerLine = bfrAnswers.readLine();
                    }
                    while (answerLine.equals("A") || answerLine.equals("B") || answerLine.equals("C")
                            || answerLine.equals("D")) {
                        System.out.println(questionLine);
                        questionLine = bfrQuestions.readLine();
                        System.out.println(questionLine);
                        questionLine = bfrQuestions.readLine();
                        System.out.println(questionLine);
                        questionLine = bfrQuestions.readLine();
                        System.out.println(questionLine);
                        questionLine = bfrQuestions.readLine();
                        System.out.println(questionLine);
                        System.out.println("Student Answer: " + answerLine);
                        answerLine = bfrAnswers.readLine();
                        String yesNo = null;    //Determines if the teacher entered yes or no
                        do {
                            System.out.println("Is this correct? Y/N");
                            temp = scan.next();
                            yesNo = temp + scan.nextLine();
                            if (!yesNo.equals("Y") && !yesNo.equals("N")) {
                                System.out.println("Try again");
                            } else if (yesNo.equals("Y")) {
                                numCorrect++;
                            }
                        } while (!yesNo.equals("Y") && !yesNo.equals("N"));
                        correct.add(yesNo);
                        questionLine = bfrQuestions.readLine();
                    }

                    BufferedReader bfr3 = new BufferedReader(new FileReader(studentQuiz));  //Buffered reader for the
                    //student quiz
                    String line = bfr3.readLine();  //Reads the next line in the buffered reader
                    line = bfr3.readLine();
                    while (line != null) {
                        entireFile.add(line);
                        line = bfr3.readLine();
                    }
                    double percentage = (double) numCorrect / correct.size() * 100;     //Holds the grade percentage
                    PrintWriter pw = new PrintWriter(new FileOutputStream(studentQuiz));    //Print writer for the
                    //student quiz
                    int j = 0;  //Counter for the answers
                    for (int i = 0; i < entireFile.size(); i++) {

                        if (entireFile.get(i).equals("A") || entireFile.get(i).equals("B") ||
                                entireFile.get(i).equals("C") || entireFile.get(i).equals("D")) {
                            if (correct.get(j).equals("Y")) {
                                pw.println(entireFile.get(i) + " Correct");
                            } else {
                                pw.println(entireFile.get(i) + " Incorrect");
                            }
                            j++;
                        } else {
                            pw.println(entireFile.get(i));
                        }

                    }
                    pw.println(percentage + "%");

                    pw.close();
                    bfrQuestions.close();
                    bfrAnswers.close();
                    bfr3.close();
                } else {
                    System.out.println("This quiz has already been graded");
                }
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * The interface the teacher sees when they login. They have 8 choices to choose from.
     */
    public void teacherInterface() {
        int choice = 0; //The teachers input
        while (choice != 8) {

            do {
                choice = 0;

                System.out.println("What would you like to do?\n1. Create Quiz\n2. Edit Quiz\n3. Delete Quiz");
                System.out.println("4. Grade Quiz\n5. View Student Submission\n6. Create Course\n7. Delete Course");
                System.out.println("8. Exit");
                try {
                    String temp = scan.next();  //Helps fix scanner issues
                    String stringChoice = temp + scan.nextLine();   //Determines what the teacher wants to do
                    choice = Integer.parseInt(stringChoice);
                } catch (NumberFormatException e) {
                    choice = 0;
                }
                if (choice < 1 || choice > 8) {
                    System.out.println("Not an option\n");
                    choice = 0;
                }

            } while (choice < 1 || choice > 8);

            if (choice == 1) {
                createQuiz();
            } else if (choice == 2) {
                editQuiz();
            } else if (choice == 3) {
                deleteQuiz();
            } else if (choice == 4) {
                manualGrade();
            } else if (choice == 5) {
                viewStudentSubmission();
            } else if (choice == 6) {
                createCourse();
            } else if (choice == 7) {
                deleteCourse();
            }
        }
        System.out.println("Goodbye!");
    }

}
